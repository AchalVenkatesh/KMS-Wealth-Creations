package main

templ PostsTemplate(posts map[string]Posts) {
	<div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr>
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Current_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price" 
                    hx-get={ "/stocks?symbol=" + p.Stock_name + "&exchange=" + p.Exchange } 
                    hx-target="this" 
                    hx-trigger="load" 
                    hx-on::after-request="calculateGrowth(this)"> 
                    Loading prices...
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                </tr>
            }
        </table>
	</div>
	<script>
    function calculateGrowth(element) {
    console.log('Element:', element);
    const row = element.closest('tr');
    console.log('Row:', row);
    
    if (!row) {
        console.error('No row found');
        return;
    }

    const buyingPriceElement = row.querySelector('.buying-price');
    const currentPriceElement = row.querySelector('.current-price');
    const growthElement = row.querySelector('.growth');

    console.log('Buying Price Element:', buyingPriceElement);
    console.log('Current Price Element:', currentPriceElement);
    console.log('Growth Element:', growthElement);

    if (!buyingPriceElement || !currentPriceElement || !growthElement) {
        console.error('Missing required elements');
        return;
    }


    const buyingPrice = parseFloat(buyingPriceElement.textContent);
    const currentPrice = parseFloat(currentPriceElement.textContent);

    if (!isNaN(buyingPrice) && !isNaN(currentPrice)) {
        const growth = currentPrice - buyingPrice;
        const growthPercentage = (growth / buyingPrice) * 100;
        growthElement.textContent = `${growth.toFixed(2)} (${growthPercentage.toFixed(2)}%)`;
        
        growthElement.style.color = growth > 0 ? 'green' : (growth < 0 ? 'red' : '');
    } else {
        growthElement.textContent = 'N/A';
    }
}
    </script>
	</div>
}

templ AdminPosts(posts map[string]Posts){
    <div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping td {
                opacity: 0;
                transition: opacity 1s ease-out;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr>
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Current_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price" 
                    hx-get={ "/stocks?symbol=" + p.Stock_name + "&exchange=" + p.Exchange } 
                    hx-target="this" 
                    hx-trigger="load" 
                    hx-on::after-request="calculateGrowth(this)"> 
                    Loading prices...
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                    <td>
                        <button hx-confirm="Are you sure?" class="action-btn delete-btn" hx-delete="/admin/deletePosts" hx-params="*">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>
	<script>
    function calculateGrowth(element) {
    console.log('Element:', element);
    const row = element.closest('tr');
    console.log('Row:', row);
    
    if (!row) {
        console.error('No row found');
        return;
    }

    const buyingPriceElement = row.querySelector('.buying-price');
    const currentPriceElement = row.querySelector('.current-price');
    const growthElement = row.querySelector('.growth');

    console.log('Buying Price Element:', buyingPriceElement);
    console.log('Current Price Element:', currentPriceElement);
    console.log('Growth Element:', growthElement);

    if (!buyingPriceElement || !currentPriceElement || !growthElement) {
        console.error('Missing required elements');
        return;
    }


    const buyingPrice = parseFloat(buyingPriceElement.textContent);
    const currentPrice = parseFloat(currentPriceElement.textContent);

    if (!isNaN(buyingPrice) && !isNaN(currentPrice)) {
        const growth = currentPrice - buyingPrice;
        const growthPercentage = (growth / buyingPrice) * 100;
        growthElement.textContent = `${growth.toFixed(2)} (${growthPercentage.toFixed(2)}%)`;
        
        growthElement.style.color = growth > 0 ? 'green' : (growth < 0 ? 'red' : '');
    } else {
        growthElement.textContent = 'N/A';
    }
}
    </script>
	</div>
}

templ NewsTemplate(news map[string]News){
    	<div class="newsTemplate">
    <style>

                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }
    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
                <th>Links</th>
            </tr>
            for _, p := range news {
                <tr>
                    <td>{ p.New }</td>
                    <td><a href="{p.Link}">{ p.Link }</a></td>
                </tr>
            }
        </table>
	</div>
		
	</div>
}

templ AdminNews(news map[string]News){
        <div class="newsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping td {
                opacity: 0;
                transition: opacity 1s ease-out;
                }

    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
                <th>Links</th>
            </tr>
            for _, p := range news {
                <tr hx-target="closest tr" hx-swap="outerHTML swap:1s">
                    <td class="stock-name" name="news">{ p.New }</td>
                    <td class="current-price" name="links">{ p.Link }</td>
                    <td>
                        <button class="action-btn delete-btn" hx-delete="/admin/deleteNews" hx-confirm="Are you sure?" hx-params="*">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>
	</div>
}

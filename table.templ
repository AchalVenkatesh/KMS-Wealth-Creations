package main

import (
    "sort"
    "fmt"
    "net/url"
    "strings"
)

templ PostsTemplate(posts map[string]Posts) {
	<div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }
    </style>
    <body onload="calculateGrowth();">
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr class="table">
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Buying_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price"> 
                    { p.Current_price}
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                </tr>
            }
        </table>
	</div>
    </body>
	<script>
       document.addEventListener('DOMContentLoaded', function() {
            console.log("HELLLOOOOOO");
            const rows = document.querySelectorAll('#stockTable tr:not(:first-child)');
            rows.forEach(row => {
                const buyingPriceElement = row.querySelector('.buying-price');
                const currentPriceElement = row.querySelector('.current-price');
                const growthElement = row.querySelector('.growth');

                console.log("Growth Element: \n",growthElement);
                console.log(currentPriceElement);

                if (buyingPriceElement && currentPriceElement && growthElement) {
                    const buyingPrice = parseFloat(buyingPriceElement.textContent);
                    const currentPrice = parseFloat(currentPriceElement.textContent);

                    if (!isNaN(buyingPrice) && !isNaN(currentPrice)) {
                        const growth = currentPrice - buyingPrice;
                        const growthPercentage = (growth / buyingPrice) * 100;
                        growthElement.textContent = `${growth.toFixed(2)} (${growthPercentage.toFixed(2)}%)`;
                        growthElement.style.color = growth > 0 ? 'green' : (growth < 0 ? 'red' : '');
                    } else {
                        growthElement.textContent = 'N/A';
                    }
                }
            });
        })
    </script>
	</div>
}


// Helper function to sort map keys (define this in your Go code)
func sortedKeys(m map[string]Posts) []string {
    keys := make([]string, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    sort.Strings(keys)
    return keys
}

templ AdminPosts(posts map[string]Posts){
    <div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping{
                opacity: 0;
                transition: opacity 1s ease-out;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr id={"row-" + generateValidID(p.Stock_name)}>
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Buying_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price" > 
                    {p.Current_price}
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                    <td>
                        <button hx-confirm="Are you sure?" class="action-btn delete-btn" hx-delete={addParam(p.Stock_name, "/deletePosts")} hx-target={"#row-" + generateValidID(p.Stock_name)}
hx-swap="outerHTML swap:1s">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>	
	</div>
}

templ NewsTemplate(news map[string]News){
    	<div class="newsTemplate">
    <style>

                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                    line-height: 1.5; 
                }
                th {
                    background-color: #f2f2f2;
                    line-height: 1.5; 
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                    line-height: 1.5; 
                }
    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
            </tr>
            for _, p := range news {
                <tr>
                    <td>{ p.New }</td>
                </tr>
            }
        </table>
	</div>
		
	</div>
}

templ AdminNews(news map[string]News){
        <div class="newsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                    line-height: 1.5; 
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping td {
                opacity: 0;
                transition: opacity 1s ease-out;
                }
                

    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
            </tr>
            for _, p := range news {
                <tr hx-target="closest tr" hx-swap="outerHTML swap:1s">
                    <td class="stock-name" name="news">{ p.New }</td>
                    <td>
                        <button class="action-btn delete-btn" hx-delete={"/admin/deleteNews?news="+p.New} hx-confirm="Are you sure?">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>
	</div>
}

templ OldPosts(pastPosts map[string]PastPosts){
    <div class="postsTemplate">
        <style>
                    table {
                        width: 100%;
                        border-collapse: collapse;
                    }
                    th, td {
                        padding: 12px;
                        border: 1px solid #ddd;
                        text-align: left;
                    }
                    th {
                        background-color: #f2f2f2;
                    }
                    tr:nth-child(even) {
                        background-color: #f9f9f9;
                    }
        </style>
        <div class="postsTemplatePost">
            <table border="1">
                <tr>
                    <th>Stock Name</th>
                    <th>Buying Price</th>
                    <th>Target Price</th>
                    <th>Target Hit</th>
                </tr>
                for _, p := range pastPosts {
                    <tr>
                        <td>{ p.Stock_name }</td>
                        <td class="buying-price">{ p.Buying_price }</td>
                        <td>{ p.Target_price }</td>
                        <td>{ p.Target }</td>
                    </tr>
                }
            </table>
        </div>
    </div>
}

templ VerifyUsers(users map[string]Users){
    <div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping{
                opacity: 0;
                transition: opacity 1s ease-out;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>Transaction ID</th>
                <th>Verify</th>
            </tr>
            for _, p := range users {
                if p.Verified==false{
                    <tr id={"row-" + p.Username}>
                    <td>{ p.Name }</td>
                    <td>{ p.Username }</td>
                    <td class="buying-price">{ p.Email }</td>
                    <td>{p.PhoneNumber}</td>
                    <td>{p.TransactionID}</td>
                    <td>
                        <button hx-confirm="Are you sure?" class="action-btn delete-btn" hx-put={oneMoreParam(p.Username, "/verify")} hx-target={"#row-" + p.Username} hx-swap="outerHTML swap:1s">Verify</button>
                    </td>
                    </tr>
                }
            }
        </table>
	</div>	
	</div>
}

templ mailTemplate(username string){
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Confirmation Email</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <table width="100%" cellpadding="0" cellspacing="0" style="max-width: 600px; margin: 0 auto;">
        <tr>
            <td style="padding: 20px; text-align: center; background-color: #ffffff;">
                <img src="https://www.arohanatradingacademy.com/images/KMS1.jpg" alt="Arohana Trading Academy Logo" style="max-width: 200px; height: auto;">
            </td>
        </tr>
        <tr>
            <td style="padding: 20px; background-color: #f4f4f4;">
                <h1 style="color: #444; text-align: center;">Confirmation Email</h1>
            </td>
        </tr>
        <tr>
            <td style="padding: 20px; background-color: #ffffff;">
                <p>Dear {username},</p>
                <p>Thank you for registering with us! This email is to inform you that your account has been verified by the admins.</p>
                <p>You can now join the elite WhatsApp group through the following link</p>
                <p><a href="">Join the WhatsApp Group</a></p>
                <p>If you have any questions or concerns, please don't hesitate to contact us.</p>
                <p>You can proceed to login through your credentials by clicking the following button: </p>
                <p style="text-align: center;">
                    <a href="https://www.arohanatradingacademy.com/login" style="display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">Login</a>
                </p>
                <p>Thank you for choosing our service!</p>
                <p>Best regards,<br>Arohana Trading Academy</p>
            </td>
        </tr>
        <tr>
            <td style="padding: 20px; background-color: #f4f4f4; text-align: center;">
                <p>&copy; 2024 Arohana Trading Academy. All rights reserved.</p>
            </td>
        </tr>
    </table>
</body>
</html>
}

func addParam(param string, route string) string{
    return fmt.Sprintf("/admin/deletePosts?stock-name=%s",url.PathEscape(param))
}

func oneMoreParam(param1 string, param2 string) string{
        return fmt.Sprintf("/admin/verify?username=%s&email=%s",url.PathEscape(param1),url.QueryEscape(param2))
}

func generateValidID(name string) string {
    // Replace spaces and special characters with underscores
    return strings.Map(func(r rune) rune {
        if r >= 'a' && r <= 'z' || r >= 'A' && r <= 'Z' || r >= '0' && r <= '9' {
            return r
        }
        return '_'
    }, name)
}
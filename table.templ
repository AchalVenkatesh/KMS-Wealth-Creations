package main

import (
    "sort"
    "fmt"
    "net/url"
    "strings"
)

templ PostsTemplate(posts map[string]Posts) {
	<div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }
    </style>
    <body onload="calculateGrowth();">
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr class="table">
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Buying_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price"> 
                    { p.Current_price}
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                </tr>
            }
        </table>
	</div>
    </body>
	<script>
       document.addEventListener('DOMContentLoaded', function() {
            console.log("HELLLOOOOOO");
            const rows = document.querySelectorAll('#stockTable tr:not(:first-child)');
            rows.forEach(row => {
                const buyingPriceElement = row.querySelector('.buying-price');
                const currentPriceElement = row.querySelector('.current-price');
                const growthElement = row.querySelector('.growth');

                console.log("Growth Element: \n",growthElement);
                console.log(currentPriceElement);

                if (buyingPriceElement && currentPriceElement && growthElement) {
                    const buyingPrice = parseFloat(buyingPriceElement.textContent);
                    const currentPrice = parseFloat(currentPriceElement.textContent);

                    if (!isNaN(buyingPrice) && !isNaN(currentPrice)) {
                        const growth = currentPrice - buyingPrice;
                        const growthPercentage = (growth / buyingPrice) * 100;
                        growthElement.textContent = `${growth.toFixed(2)} (${growthPercentage.toFixed(2)}%)`;
                        growthElement.style.color = growth > 0 ? 'green' : (growth < 0 ? 'red' : '');
                    } else {
                        growthElement.textContent = 'N/A';
                    }
                }
            });
        })
    </script>
	</div>
}


// Helper function to sort map keys (define this in your Go code)
func sortedKeys(m map[string]Posts) []string {
    keys := make([]string, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    sort.Strings(keys)
    return keys
}

templ AdminPosts(posts map[string]Posts){
    <div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping{
                opacity: 0;
                transition: opacity 1s ease-out;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr id={"row-" + generateValidID(p.Stock_name)}>
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Buying_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price" > 
                    {p.Current_price}
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                    <td>
                        <button hx-confirm="Are you sure?" class="action-btn delete-btn" hx-delete={addParam(p.Stock_name, "/deletePosts")} hx-target={"#row-" + generateValidID(p.Stock_name)}
hx-swap="outerHTML swap:1s">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>	
	</div>
}

templ NewsTemplate(news map[string]News){
    	<div class="newsTemplate">
    <style>

                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                    line-height: 1.5; 
                }
                th {
                    background-color: #f2f2f2;
                    line-height: 1.5; 
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                    line-height: 1.5; 
                }
    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
            </tr>
            for _, p := range news {
                <tr>
                    <td>{ p.New }</td>
                </tr>
            }
        </table>
	</div>
		
	</div>
}

templ AdminNews(news map[string]News){
        <div class="newsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                    line-height: 1.5; 
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping td {
                opacity: 0;
                transition: opacity 1s ease-out;
                }
                

    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
            </tr>
            for _, p := range news {
                <tr hx-target="closest tr" hx-swap="outerHTML swap:1s">
                    <td class="stock-name" name="news">{ p.New }</td>
                    <td>
                        <button class="action-btn delete-btn" hx-delete={"/admin/deleteNews?news="+p.New} hx-confirm="Are you sure?">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>
	</div>
}

templ OldPosts(pastPosts map[string]PastPosts){
    <div class="postsTemplate">
        <style>
                    table {
                        width: 100%;
                        border-collapse: collapse;
                    }
                    th, td {
                        padding: 12px;
                        border: 1px solid #ddd;
                        text-align: left;
                    }
                    th {
                        background-color: #f2f2f2;
                    }
                    tr:nth-child(even) {
                        background-color: #f9f9f9;
                    }
        </style>
        <div class="postsTemplatePost">
            <table border="1">
                <tr>
                    <th>Stock Name</th>
                    <th>Buying Price</th>
                    <th>Target Price</th>
                    <th>Target Hit</th>
                </tr>
                for _, p := range pastPosts {
                    <tr>
                        <td>{ p.Stock_name }</td>
                        <td class="buying-price">{ p.Buying_price }</td>
                        <td>{ p.Target_price }</td>
                        <td>{ p.Target }</td>
                    </tr>
                }
            </table>
        </div>
    </div>
}

templ VerifyUsers(users map[string]Users){
    <div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping{
                opacity: 0;
                transition: opacity 1s ease-out;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>Transaction ID</th>
                <th>Verify</th>
            </tr>
            for _, p := range users {
                if p.Verified==false{
                    <tr id={"row-" + p.Username}>
                    <td>{ p.Name }</td>
                    <td>{ p.Username }</td>
                    <td class="buying-price">{ p.Email }</td>
                    <td>{p.PhoneNumber}</td>
                    <td>{p.TransactionID}</td>
                    <td>
                        <button hx-confirm="Are you sure?" class="action-btn delete-btn" hx-put={oneMoreParam(p.Username, "/verify")} hx-target={"#row-" + p.Username} hx-swap="outerHTML swap:1s">Verify</button>
                    </td>
                    </tr>
                }
            }
        </table>
	</div>	
	</div>
}

templ mailTemplate(username string){
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Confirmation Email</title>
</head>
<body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
    <table width="100%" cellpadding="0" cellspacing="0" style="max-width: 600px; margin: 0 auto;">
        <tr>
            <td style="padding: 20px; text-align: center; background-color: #ffffff;">
                <img src="https://www.arohanatradingacademy.com/images/KMS1.jpg" alt="Arohana Trading Academy Logo" style="max-width: 200px; height: auto;">
            </td>
        </tr>
        <tr>
            <td style="padding: 20px; background-color: #f4f4f4;">
                <h1 style="color: #444; text-align: center;">Confirmation Email</h1>
            </td>
        </tr>
        <tr>
            <td style="padding: 20px; background-color: #ffffff;">
                <p>Dear {username},</p>
                <p>Thank you for registering with us! This email is to inform you that your account has been verified by the admins.</p>
                <p>You can now join the elite WhatsApp group through the following link</p>
                <p><a href="">Join the WhatsApp Group</a></p>
                <p>If you have any questions or concerns, please don't hesitate to contact us.</p>
                <p>You can proceed to login through your credentials by clicking the following button: </p>
                <p style="text-align: center;">
                    <a href="https://www.arohanatradingacademy.com/login" style="display: inline-block; padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 5px;">Login</a>
                </p>
                <p>Thank you for choosing our service!</p>
                <p>Best regards,<br>Arohana Trading Academy</p>
            </td>
        </tr>
        <tr>
            <td style="padding: 20px; background-color: #f4f4f4; text-align: center;">
                <p>&copy; 2024 Arohana Trading Academy. All rights reserved.</p>
            </td>
        </tr>
    </table>
</body>
</html>
}

func addParam(param string, route string) string{
    return fmt.Sprintf("/admin/deletePosts?stock-name=%s",url.PathEscape(param))
}

func oneMoreParam(param1 string, param2 string) string{
        return fmt.Sprintf("/admin/verify?username=%s&email=%s",url.PathEscape(param1),url.QueryEscape(param2))
}

func generateValidID(name string) string {
    // Replace spaces and special characters with underscores
    return strings.Map(func(r rune) rune {
        if r >= 'a' && r <= 'z' || r >= 'A' && r <= 'Z' || r >= '0' && r <= '9' {
            return r
        }
        return '_'
    }, name)
}

func Posts(posts map[string]Posts, elitePosts[string]Posts, elite bool){
  <!DOCTYPE html>
<html id="body" lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests">
    <title>Dashboard</title>
      <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <script src="https://unpkg.com/htmx.org@1.9.12/dist/htmx.js" integrity="sha384-qbtR4rS9RrUMECUWDWM2+YGgN3U4V4ZncZ0BvUcg9FGct0jqXz3PUdVpU1p0yrXS" crossorigin="anonymous"></script>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
   <link href="https://cdnjs.cloudflare.com/ajax/libs/lightbox2/2.11.3/css/lightbox.min.css" rel="stylesheet">
<style>
    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Montserrat', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #fff5d7;
      color: #333;
    }

    header {
      background-color: #343a40;
      color: #fff;
      padding: 1rem;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      position: relative;
    }

    section {
    display: block;
    unicode-bidi: isolate;
}

footer {
  background-color: #343a40;
  color: #fff;
  padding: 1.25rem;
  text-align: center;
  margin-top: 2.5rem;
}

    .navbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      padding: 0;
    }

   .logo {
      padding: 20px;
      max-width: 128px;
      border-radius: 50%;
      align-self: left;
      margin-top: 0;
      max-height: 128px;
    }

    .navbar .nav-content {
      display: flex;
      align-items: center;
    }

    .navbar .nav-links {
      display: flex;
      list-style: none;
      margin: 0;
      padding: 0;
    }


    .navbar .nav-links li {
      margin-right: 1.25rem;
    }

    .navbar .nav-links li:last-child {
      margin-right: 0;
    }

    .navbar .nav-links a {
      color: #f2f2f2;
      text-decoration: none;
      font-size: 1rem;
      padding: 0.875rem 1rem;
    }

    .navbar .nav-links a:hover {
      background-color: #ddd;
      color: #333;
    }

    .navbar .btn-signup,
    .navbar .btn-login {
      background-color: #4CAF50;
      color: white;
      padding: 0.625rem 1rem;
      border: none;
      border-radius: 0.25rem;
      cursor: pointer;
      font-size: 1rem;
      margin-left: 0.625rem;
    }

    .navbar .btn:hover {
      background-color: #45a049;
    }

    .hamburger-menu {
      display: none;
      flex-direction: column;
      cursor: pointer;
    }

    .hamburger-menu div {
      width: 25px;
      height: 3px;
      background-color: #fff;
      margin: 4px 0;
      transition: 0.4s;
    }

    

    #menu-toggle {
      display: none;
    }

    .nav-links-mobile {
      display: none;
      flex-direction: column;
      align-items: center;
      width: 100%;
      background-color: #343a40;
      position: absolute;
      top: 100%;
      left: 0;
    }

    .nav-links-mobile a {
      padding: 1rem;
      width: 100%;
      text-align: center;
      border-top: 1px solid #444;
    }

    #menu-toggle:checked ~ .nav-links-mobile {
      display: flex;
    }

    .about-us {
    margin-bottom: 2.5rem;
    background-color: #f8f9fa;
    padding: 1.875rem;
    border-radius: 0.625rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 90vw;
      margin: 2.5rem auto;
    }

    .about-us h1{
        font-size: 4.5rem;
        margin-bottom: 0;
        padding-bottom: 0;
        text-align: left;
    }
    .about-us h2{
        margin-top: 10px;
        text-align: left;
    }

    .about-us {
    margin-bottom: 2.5rem;
    background-color: #f8f9fa;
    padding: 1.875rem;
    border-radius: 0.625rem;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    max-width: 90vw;
    margin: 2.5rem auto;
}

.about-content {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

.about-content .text {
    flex: 1;
    margin-left: 1.875rem; /* Adjust the spacing between text and image */
}

.about-content .image img{
    flex-shrink: 0;
     width: 300px;
    height: auto;
    max-width: 100%;
}

.about-us h2 {
    margin-top: 0;
    text-align: left;
    size: 100%;
}

h1 {
  font-size: 2rem;
  margin-bottom: 0.625rem;
}
     p{
        line-height: 2;
     }

     .company-info {
    display: flex;
    flex-direction: column;
    padding-bottom: 1rem;
    text-align: left;
}

.company-info h1{
    margin-bottom: 0;
}
.company-info p{
  margin-left: 0;
}

    @keyframes slideInFromLeft {
      0% {
        transform: translateX(-100%);
        opacity: 0;
      }
      100% {
        transform: translateX(0);
        opacity: 1;
      }
    }

    @media (max-width: 768px) {
       .navbar .nav-links, .btn {
        display: none;
      }


      /* .navbar {
        flex-direction: column;
        align-items: center;
    } */

     .hamburger-menu {
    display: flex;
    order: 3;
    padding-left: 1rem;
}
.company-info {
    order: 2;
    padding-bottom: 1rem;
    text-align: left;
    flex-grow: 1;
}
.company-info h1{
  text-align: left;
}

.company-info p{
  display: none;
}
.logo {
    order: 1;
    max-width: 4rem;
    margin-left: 0;
    margin-right: 0;
    padding-top: 1rem;
}

.about-content {
    flex-direction: column;
}

.about-content .image {
    order: -1;
    margin-bottom: 1rem;
}
    }

    @media (max-width: 480px) {
      header {
        padding: 0.625rem;
      }

      .navbar .nav-links li {
        margin-right: 0.625rem;
      }

      .navbar .btn-login,
      .navbar .btn-signup {
        padding: 0.5rem 0.875rem;
        font-size: 0.875rem;
      }

      .company-info h1{
        text-align: center;
      }
      .company-info p{
        text-align: center;
      }
    }
</style>
</head>
<body>
  <header>
    <nav class="navbar">
      <img src="/images/logo-copy.png" alt="Arohana Trading Academy Logo" class="logo">
      <div class="company-info">
                <h1>Arohana Trading Academy</h1>
                <p class="slogan" style="margin-left: 10px;">Build wealth with little intelligence and a lot of commonsense.</p>
            </div>
      <input type="checkbox" id="menu-toggle">
      <div class="hamburger-menu" onclick="document.getElementById('menu-toggle').checked = !document.getElementById('menu-toggle').checked;">
        <div></div>
        <div></div>
        <div></div>
      </div>
      <ul class="nav-links">
        <li><a href="/auth/dashboard">Stock Recommendations</a></li>
        <li><a href="/auth/news">News</a></li>
        <li><a href="/auth/profile">Profile Details</a></li>
        <!-- <li><a href="services.html">Events</a></li> -->
        <li><a href="/auth/pastPosts">Past recommendations</a></li>
        <!-- <button class="btn-login">Logout</button> -->
      </ul>
      <div class="btn">
      
        <button type="submit" class="btn-login" onclick="const cookies = document.cookie.split(';');
        for (let c = 0; c < cookies.length; c++) {
            const d = window.location.hostname.split('.');
            while (d.length > 0) {
                const cookieBase = encodeURIComponent(cookies[c].split(';')[0].split('=')[0]) +
                      '=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=' + d.join('.') + ' ;path=';
                const p = window.location.pathname.split('/');
                document.cookie = cookieBase + '/';
                while (p.length > 0) {
                    document.cookie = cookieBase + p.join('/');
                    p.pop();
                };
                d.shift();
            }
        }"><a href="/auth/logout" >Logout</a></button>
        <script>        
        </script>
      </div>
      <div class="nav-links-mobile">
                <li><a href="/auth/dashboard">Stock Recommendations</a></li>
        <li><a href="/auth/news">News</a></li>
        <li><a href="/auth/profile">Profile Details</a></li>
        <!-- <li><a href="services.html">Events</a></li> -->
        <li><a href="/auth/pastPosts">Past recommendations</a></li>
        <!-- <button class="btn-login">Logout</button> -->
        <!-- <button class="btn-login">Logout</button> -->
      </div>
    </nav>
  </header>
  <section id="contact" class="about-us" hx-boost="true" hx-get="/auth/posts" hx-trigger="load" hx-target="#container" hx-on:htmx:after-request="calculateGrowth(this)">
    <h2>Elite Posts</h2>
    <div id="container" class="container">
      @PostsTemplate(elitePosts)
    </div>
    <h2>Other Posts</h2>
    <div id="container" class="container">
      @PostsTemplate(posts)
    </div>
    </section>
    	<script>
    function calculateGrowth(element) {
    console.log('Element:', element);
    var rows = document.getElementsByTagName("tr")
    console.log(rows)
    //const row = element.closest('tr');
    for(let i=1; i<rows.length;i++){
    var row = rows[i]
    console.log('Row:', row);
    
    if (!row) {
        console.error('No row found');
        return;
    }

    const buyingPriceElement = row.querySelector('.buying-price');
    const currentPriceElement = row.querySelector('.current-price');
    const growthElement = row.querySelector('.growth');

    console.log('Buying Price Element:', buyingPriceElement);
    console.log('Current Price Element:', currentPriceElement);
    console.log('Growth Element:', growthElement);

    if (!buyingPriceElement || !currentPriceElement || !growthElement) {
        console.error('Missing required elements');
        return;
    }


    const buyingPrice = parseFloat(buyingPriceElement.textContent);
    const currentPrice = parseFloat(currentPriceElement.textContent);

    if (!isNaN(buyingPrice) && !isNaN(currentPrice)) {
        const growth = currentPrice - buyingPrice;
        const growthPercentage = (growth / buyingPrice) * 100;
        growthElement.textContent = `${growth.toFixed(2)} (${growthPercentage.toFixed(2)}%)`;
        
        growthElement.style.color = growth > 0 ? 'green' : (growth < 0 ? 'red' : '');
    } else {
        growthElement.textContent = 'N/A';
    }}
}
    window.onload=calculateGrowth;
    </script>
  <footer>
    <style>
      /* .contact-us{
        text-align: left;
      } */
    </style>
              <div class="contact-us">
            <a href="/privacy">Privacy policy</a>
            <p>Contact Us</p>
            <p>Email: <a href="mailto:info@arohanatradingacademy.org">info@arohanatradingacademy.org</a></p>
            <p>Phone: +91 8310383448</p>
              <div class="social-media">
                <a href="https://www.instagram.com/kmswealthcreations?igsh=MWRzc2R0a3hsbGYzaQ==">Instagram</a> | 
                <a href="https://x.com/kmswcs">Twitter</a> 
            </div>
          </div>
    <p>&copy; 2024 Arohana Trading Academy. All rights reserved.</p>
  </footer>
</body>
</html>
}
package main

import (
    "sort"
    "fmt"
)

templ PostsTemplate(posts map[string]Posts) {
	<div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }
    </style>
    <body onload="calculateGrowth();">
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr class="table">
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Buying_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price"> 
                    { p.Current_price}
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                </tr>
            }
        </table>
	</div>
    </body>
	<script>
       document.addEventListener('DOMContentLoaded', function() {
            console.log("HELLLOOOOOO");
            const rows = document.querySelectorAll('#stockTable tr:not(:first-child)');
            rows.forEach(row => {
                const buyingPriceElement = row.querySelector('.buying-price');
                const currentPriceElement = row.querySelector('.current-price');
                const growthElement = row.querySelector('.growth');

                console.log("Growth Element: \n",growthElement);
                console.log(currentPriceElement);

                if (buyingPriceElement && currentPriceElement && growthElement) {
                    const buyingPrice = parseFloat(buyingPriceElement.textContent);
                    const currentPrice = parseFloat(currentPriceElement.textContent);

                    if (!isNaN(buyingPrice) && !isNaN(currentPrice)) {
                        const growth = currentPrice - buyingPrice;
                        const growthPercentage = (growth / buyingPrice) * 100;
                        growthElement.textContent = `${growth.toFixed(2)} (${growthPercentage.toFixed(2)}%)`;
                        growthElement.style.color = growth > 0 ? 'green' : (growth < 0 ? 'red' : '');
                    } else {
                        growthElement.textContent = 'N/A';
                    }
                }
            });
        })
    </script>
	</div>
}


// Helper function to sort map keys (define this in your Go code)
func sortedKeys(m map[string]Posts) []string {
    keys := make([]string, 0, len(m))
    for k := range m {
        keys = append(keys, k)
    }
    sort.Strings(keys)
    return keys
}

templ AdminPosts(posts map[string]Posts){
    <div class="postsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping{
                opacity: 0;
                transition: opacity 1s ease-out;
                }
    </style>
	<div class="postsTemplatePost">
        <table border="1">
            <tr>
                <th>Stock Name</th>
                <th>Buying Price</th>
                <th>Target Price</th>
                <th>Exchange</th>
                <th>Current Price</th>
                <th>Growth</th>
                <th>Comments</th>
            </tr>
            for _, p := range posts {
                <tr id={"row-" + p.Stock_name}>
                    <td>{ p.Stock_name }</td>
                    <td class="buying-price">{ p.Buying_price }</td>
                    <td>{ p.Target_price }</td>
                    <td>{ p.Exchange }</td>
                    <td class="current-price" > 
                    {p.Current_price}
                    </td>
                    <td class="growth">Calculating Growth...</td>
                    <td>{ p.Comments }</td>
                    <td>
                        <button hx-confirm="Are you sure?" class="action-btn delete-btn" hx-delete={addParam(p.Stock_name)} hx-target={"#row-" + p.Stock_name}
hx-swap="outerHTML swap:1s">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>	
	</div>
}

templ NewsTemplate(news map[string]News){
    	<div class="newsTemplate">
    <style>

                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                    line-height: 1.5; 
                }
                th {
                    background-color: #f2f2f2;
                    line-height: 1.5; 
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                    line-height: 1.5; 
                }
    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
            </tr>
            for _, p := range news {
                <tr>
                    <td>{ p.New }</td>
                </tr>
            }
        </table>
	</div>
		
	</div>
}

templ AdminNews(news map[string]News){
        <div class="newsTemplate">
    <style>
                table {
                    width: 100%;
                    border-collapse: collapse;
                }
                th, td {
                    padding: 12px;
                    border: 1px solid #ddd;
                    text-align: left;
                    line-height: 1.5; 
                }
                th {
                    background-color: #f2f2f2;
                }
                tr:nth-child(even) {
                    background-color: #f9f9f9;
                }

                .delete-btn {
                    background-color: red;
                    color: white;
                    border: none;
                    cursor: pointer;
                    padding: 8px;
                    text-align: center;
                    text-decoration: none;
                    display: inline-block;
                    font-size: 16px;
                    border-radius: 4px;
                }
                .delete-btn:hover {
                    background-color: darkred;
                }
                .delete-icon {
                    margin-right: 8px;
                }
                tr.htmx-swapping td {
                opacity: 0;
                transition: opacity 1s ease-out;
                }
                

    </style>
	<div class="newsTemplatePost">
        <table border="1">
            <tr>
                <th>News</th>
            </tr>
            for _, p := range news {
                <tr hx-target="closest tr" hx-swap="outerHTML swap:1s">
                    <td class="stock-name" name="news">{ p.New }</td>
                    <td>
                        <button class="action-btn delete-btn" hx-delete="/admin/deleteNews" hx-confirm="Are you sure?" hx-params="*">Delete</button>
                    </td>
                </tr>
            }
        </table>
	</div>
	</div>
}

templ OldPosts(pastPosts map[string]PastPosts){
    <div class="postsTemplate">
        <style>
                    table {
                        width: 100%;
                        border-collapse: collapse;
                    }
                    th, td {
                        padding: 12px;
                        border: 1px solid #ddd;
                        text-align: left;
                    }
                    th {
                        background-color: #f2f2f2;
                    }
                    tr:nth-child(even) {
                        background-color: #f9f9f9;
                    }
        </style>
        <div class="postsTemplatePost">
            <table border="1">
                <tr>
                    <th>Stock Name</th>
                    <th>Buying Price</th>
                    <th>Target Price</th>
                    <th>Target Hit</th>
                </tr>
                for _, p := range pastPosts {
                    <tr>
                        <td>{ p.Stock_name }</td>
                        <td class="buying-price">{ p.Buying_price }</td>
                        <td>{ p.Target_price }</td>
                        <td>{ p.Target }</td>
                    </tr>
                }
            </table>
        </div>
    </div>
}

func addParam(stock string) string{
    return fmt.Sprintf("/admin/deletePosts?stock-name=%s",stock)
}